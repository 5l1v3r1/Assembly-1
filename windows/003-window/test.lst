     1                                  ; BABY'S FIRST WINDOW
     2                                  ;
     3                                  ; Will display a blank window which you can min/max/resize, move, and close.
     4                                  ; The output could be more minimalist if you remove all the debug traces,
     5                                  ; but I decided to leave them in so future self would have a point of reference.
     6                                  ;
     7                                  ; I like the techniques used here because there are no dependency libraries,
     8                                  ; not even the C Standard lib (ie. MSVCRT). It just uses what Windows gives all
     9                                  ; programs by default with KERNEL32.DLL.
    10                                  ;
    11                                  ; The other thing you'll notice is test.js is effectively a NASM preprocessor
    12                                  ; alternative using modern JavaScript syntax (and utility libraries like lodash!)
    13                                  ; It is more efficient and less repetitive. I could have used any higher-level
    14                                  ; language to achieve this effect, but Node.JS just seemed close at hand.
    15                                  ; I am happy with the results and will probably continue using the approach,
    16                                  ; because its teaching me [by comparison] how the assembler works, and helping
    17                                  ; me look for optimizations to the whole process of writing code at this layer.
    18                                  ; Not to mention better support for these languages by modern IDEs!
    19                                  ;
    20                                  ; Build steps:
    21                                  ;
    22                                  ; npm install lodash
    23                                  ; node test.js # will overwrite test.nasm
    24                                  ; # update paths in build.sh to match your system and environment
    25                                  ; sh build.sh # will use NASM + LD to compile test.obj and test.exe
    26                                  ; cdb test.exe # nice command-line windows debugger
    27                                  ;
    28                                  
    29                                  ; build window
    30                                  extern GetModuleHandleA
    31                                  extern CreateMutexA
    32                                  extern LoadImageA
    33                                  extern RegisterClassExA
    34                                  extern CreateWindowExA
    35                                  
    36                                  ; main loop
    37                                  extern PeekMessageA
    38                                  extern TranslateMessage
    39                                  extern DispatchMessageA
    40                                  extern DefWindowProcA
    41                                  
    42                                  ; shutdown/cleanup
    43                                  extern DestroyWindow
    44                                  extern PostQuitMessage
    45                                  extern ExitProcess
    46                                  
    47                                  ; error handling
    48                                  extern SetLastError
    49                                  extern GetLastError
    50                                  extern FormatMessageA
    51                                  extern GetStdHandle
    52                                  extern WriteFile
    53                                  
    54                                  section .data align=16
    55 00000000 00000000                GetLastError__errCode: dd 0
    56 00000004 00000000                Console__stderr_nStdHandle: dd 0
    57 00000008 00000000                Console__stdout_nStdHandle: dd 0
    58 0000000C 00<rept>                FormatMessage__tmpReturnBuffer: times 256 db 0
    59 0000010C 00000000                FormatMessage__tmpReturnBufferLength: dd 0
    60 00000110 00000000                Console__bytesWritten: dd 0
    61 00000114 65343464373534352D-     Generic__uuid: db "e44d7545-f9df-418e-bc37-11ad4535d32f",0
    61 0000011D 663964662D34313865-
    61 00000126 2D626333372D313161-
    61 0000012F 643435333564333266-
    61 00000138 00                 
    62 00000139 0000000000000000        CreateMutexA__handle: dq 0
    63 00000141 0000000000000000        GetModuleHandleA__hModule: dq 0
    64 00000149 0000000000000000        CreateWindow__icon: dq 0
    65 00000151 0000000000000000        CreateWindow__cursor: dq 0
    66                                  
    67                                  ; struct
    68                                  MainWindow_1: ; instanceof tagWNDCLASSEXA
    69 00000159 50000000                MainWindow_1.cbSize dd 80 ; UINT
    70 0000015D 23000000                MainWindow_1.style dd 0x23 ; UINT = CS_OWNDC | CS_VREDRAW | CS_HREDRAW
    71 00000161 [2705000000000000]      MainWindow_1.lpfnWndProc dq WndProc ; WNDPROC
    72 00000169 00000000                MainWindow_1.cbClsExtra dd 0 ; int
    73 0000016D 00000000                MainWindow_1.cbWndExtra dd 0 ; int
    74 00000171 [4101000000000000]      MainWindow_1.hInstance dq GetModuleHandleA__hModule ; HINSTANCE
    75 00000179 [4901000000000000]      MainWindow_1.hIcon dq CreateWindow__icon ; HICON
    76 00000181 [5101000000000000]      MainWindow_1.hCursor dq CreateWindow__cursor ; HCURSOR
    77 00000189 0500000000000000        MainWindow_1.hbrBackground dq 5 ; HBRUSH
    78 00000191 0000000000000000        MainWindow_1.lpszMenuName dq 0 ; LPCSTR
    79 00000199 [1401000000000000]      MainWindow_1.lpszClassName dq Generic__uuid ; LPCSTR
    80 000001A1 0000000000000000        MainWindow_1.hIconSm dq 0 ; HICON
    81                                  
    82 000001A9 0000000000000000        CreateWindow__atom_name: dq 0
    83 000001B1 0000000000000000        CreateWindow__hWnd: dq 0
    84 000001B9 57696E646F77204465-     CreateWindow__title: db "Window Demo",0
    84 000001C2 6D6F00             
    85                                  
    86                                  ; struct
    87                                  IncomingMessage_1: ; instanceof tagMSG
    88 000001C5 0000000000000000        IncomingMessage_1.hwnd dq 0 ; HWND
    89 000001CD 00000000                IncomingMessage_1.message dd 0 ; UINT
    90 000001D1 0000000000000000        IncomingMessage_1.wParam dq 0 ; WPARAM
    91 000001D9 0000000000000000        IncomingMessage_1.lParam dq 0 ; LPARAM
    92 000001E1 00000000                IncomingMessage_1.time dd 0 ; dword
    93 000001E5 00000000                IncomingMessage_1.pt.x dd 0 ; dword
    94 000001E9 00000000                IncomingMessage_1.pt.y dd 0 ; dword
    95 000001ED 00000000                IncomingMessage_1.lPrivate dd 0 ; dword
    96                                  
    97 000001F1 00000000                PeekMessage_hasMsgs: dd 0
    98 000001F5 5065656B4D65737361-     debug_trace_4: db "PeekMessageA has messages for CreateWindow__hWnd %1!.16llX!",10,0
    98 000001FE 67654120686173206D-
    98 00000207 657373616765732066-
    98 00000210 6F7220437265617465-
    98 00000219 57696E646F775F5F68-
    98 00000222 576E64202531212E31-
    98 0000022B 366C6C58210A00     
    99 00000232 0000000000000000-       __trace_array: times 8 dq 0
    99 00000232 <rept>             
   100 00000272 0A4D65737361676520-     PeekMessage_msgIdFormatString: db 10,"Message received:",10,"  hwnd: %1!.16llX!",10,"  message: %2!.4llX!",10,"  wParam: %3!.16llX!",10,"  lParam: %4!.16llX!",10,"  time: %5!.16llX!",10,"  pt.x: %6!lu!",10,"  pt.y: 
   100 0000027B 72656365697665643A-
   100 00000284 0A202068776E643A20-
   100 0000028D 2531212E31366C6C58-
   100 00000296 210A20206D65737361-
   100 0000029F 67653A202532212E34-
   100 000002A8 6C6C58210A20207750-
   100 000002B1 6172616D3A20253321-
   100 000002BA 2E31366C6C58210A20-
   100 000002C3 206C506172616D3A20-
   100 000002CC 2534212E31366C6C58-
   100 000002D5 210A202074696D653A-
   100 000002DE 202535212E31366C6C-
   100 000002E7 58210A202070742E78-
   100 000002F0 3A202536216C75210A-
   100 000002F9 202070742E793A2025-
   100 00000302 37216C75210A20206C-
   100 0000030B 507269766174653A20-
   100 00000314 2538212E386C6C5821-
   100 0000031D 0A00               
   101 0000031F 574D5F515549542072-     debug_trace_1: db "WM_QUIT received by main Loop.",10,0
   101 00000328 656365697665642062-
   101 00000331 79206D61696E204C6F-
   101 0000033A 6F702E0A00         
   102 0000033F 5472616E736C617465-     debug_trace_5: db "TranslateMessage",10,0
   102 00000348 4D6573736167650A00 
   103 00000351 44697370617463684D-     debug_trace_5a: db "DispatchMessageA",10,0
   103 0000035A 657373616765410A00 
   104 00000363 0000000000000000        nWndProc__hWnd: dq 0
   105 0000036B 0000000000000000        nWndProc__uMsg: dq 0
   106 00000373 0000000000000000        nWndProc__wParam: dq 0
   107 0000037B 0000000000000000        nWndProc__lParam: dq 0
   108 00000383 0000000000000000        nWndProc__return: dq 0
   109 0000038B 574D5F434C4F534520-     debug_trace_2: db "WM_CLOSE received by WndProc.",10,0
   109 00000394 726563656976656420-
   109 0000039D 627920576E6450726F-
   109 000003A6 632E0A00           
   110 000003AA 44657374726F795769-     debug_trace_7: db "DestroyWindow sent",10,0
   110 000003B3 6E646F772073656E74-
   110 000003BC 0A00               
   111 000003BE 574D5F44455354524F-     debug_trace_3: db "WM_DESTROY received by WndProc.",10,0
   111 000003C7 592072656365697665-
   111 000003D0 6420627920576E6450-
   111 000003D9 726F632E0A00       
   112 000003DF 506F7374517569744D-     debug_trace_8: db "PostQuitMessage sent",10,0
   112 000003E8 657373616765207365-
   112 000003F1 6E740A00           
   113                                  
   114                                  section .text align=16
   115                                  global main
   116                                  main:
   117                                  
   118                                  ; get pointers to stdout/stderr pipes
   119 00000000 E813080000              call near GetLastError__prologue_reset
   120                                  ; MS __fastcall x64 ABI
   121 00000005 4883EC28                sub rsp, 40 ; allocate shadow space
   122 00000009 B9F4FFFFFF              mov dword ecx, -12 ; 1st: DWORD nStdHandle = STD_ERROR_HANDLE
   123 0000000E E8(00000000)                call GetStdHandle
   124 00000013 890425[04000000]        mov dword [Console__stderr_nStdHandle], eax ; return 
   125 0000001A 4883C428                add rsp, 40 ; deallocate shadow space
   126 0000001E E808080000              call near GetLastError__epilogue_check
   127                                  
   128 00000023 E8F0070000              call near GetLastError__prologue_reset
   129                                  ; MS __fastcall x64 ABI
   130 00000028 4883EC28                sub rsp, 40 ; allocate shadow space
   131 0000002C B9F5FFFFFF              mov dword ecx, -11 ; 1st: DWORD nStdHandle = STD_OUTPUT_HANDLE
   132 00000031 E8(00000000)                call GetStdHandle
   133 00000036 890425[08000000]        mov dword [Console__stdout_nStdHandle], eax ; return 
   134 0000003D 4883C428                add rsp, 40 ; deallocate shadow space
   135 00000041 E8E5070000              call near GetLastError__epilogue_check
   136                                  
   137                                  
   138 00000046 E8CD070000              call near GetLastError__prologue_reset
   139                                  ; MS __fastcall x64 ABI
   140 0000004B 4883EC28                sub rsp, 40 ; allocate shadow space
   141 0000004F 41B8[14010000]          mov dword r8d, Generic__uuid ; 3rd: LPCSTR lpName
   142 00000055 BA01000000              mov dword edx, 1 ; 2nd: BOOL bInitialOwner
   143 0000005A B900000000              mov dword ecx, 0 ; 1st: LPSECURITY_ATTRIBUTES lpMutexAttributes
   144 0000005F E8(00000000)                call CreateMutexA
   145 00000064 48890425[39010000]      mov qword [CreateMutexA__handle], rax ; return HANDLE
   146 0000006C 4883C428                add rsp, 40 ; deallocate shadow space
   147 00000070 E8B6070000              call near GetLastError__epilogue_check
   148                                  
   149 00000075 E89E070000              call near GetLastError__prologue_reset
   150                                  ; MS __fastcall x64 ABI
   151 0000007A 4883EC28                sub rsp, 40 ; allocate shadow space
   152 0000007E B900000000              mov dword ecx, 0 ; 1st: LPCSTR lpModuleName
   153 00000083 E8(00000000)                call GetModuleHandleA
   154 00000088 48890425[41010000]      mov qword [GetModuleHandleA__hModule], rax ; return HMODULE *phModule
   155 00000090 4883C428                add rsp, 40 ; deallocate shadow space
   156 00000094 E892070000              call near GetLastError__epilogue_check
   157                                  
   158 00000099 E87A070000              call near GetLastError__prologue_reset
   159                                  ; MS __fastcall x64 ABI
   160 0000009E 4883EC38                sub rsp, 56 ; allocate shadow space
   161 000000A2 C744242840800000        mov dword [rsp + 40], 0x8040 ; 6th: UINT fuLoad = LR_SHARED | LR_DEFAULTSIZE
   162 000000AA C744242000000000        mov dword [rsp + 32], 0 ; 5th: int cy
   163 000000B2 41B900000000            mov dword r9d, 0 ; 4th: int cx
   164 000000B8 41B801000000            mov dword r8d, 1 ; 3rd: UINT type = IMAGE_ICON
   165 000000BE BA057F0000              mov dword edx, 32517 ; 2nd: LPCSTR name = OIC_WINLOGO
   166 000000C3 B900000000              mov dword ecx, 0 ; 1st: HINSTANCE hInst
   167 000000C8 E8(00000000)                call LoadImageA
   168 000000CD 48890425[49010000]      mov qword [CreateWindow__icon], rax ; return HANDLE
   169 000000D5 4883C438                add rsp, 56 ; deallocate shadow space
   170 000000D9 E84D070000              call near GetLastError__epilogue_check
   171                                  
   172 000000DE E835070000              call near GetLastError__prologue_reset
   173                                  ; MS __fastcall x64 ABI
   174 000000E3 4883EC38                sub rsp, 56 ; allocate shadow space
   175 000000E7 C744242840800000        mov dword [rsp + 40], 0x8040 ; 6th: UINT fuLoad = LR_SHARED | LR_DEFAULTSIZE
   176 000000EF C744242000000000        mov dword [rsp + 32], 0 ; 5th: int cy
   177 000000F7 41B900000000            mov dword r9d, 0 ; 4th: int cx
   178 000000FD 41B802000000            mov dword r8d, 2 ; 3rd: UINT type = IMAGE_CURSOR
   179 00000103 BA007F0000              mov dword edx, 32512 ; 2nd: LPCSTR name = IDC_ARROW
   180 00000108 B900000000              mov dword ecx, 0 ; 1st: HINSTANCE hInst
   181 0000010D E8(00000000)                call LoadImageA
   182 00000112 48890425[51010000]      mov qword [CreateWindow__cursor], rax ; return HANDLE
   183 0000011A 4883C438                add rsp, 56 ; deallocate shadow space
   184 0000011E E808070000              call near GetLastError__epilogue_check
   185                                  
   186 00000123 E8F0060000              call near GetLastError__prologue_reset
   187                                  ; MS __fastcall x64 ABI
   188 00000128 4883EC28                sub rsp, 40 ; allocate shadow space
   189 0000012C 48B9-                   mov qword rcx, MainWindow_1 ; 1st: WNDCLASSEXA *Arg1
   189 0000012E [5901000000000000] 
   190 00000136 E8(00000000)                call RegisterClassExA
   191 0000013B 48890425[A9010000]      mov qword [CreateWindow__atom_name], rax ; return 
   192 00000143 4883C428                add rsp, 40 ; deallocate shadow space
   193 00000147 E8DF060000              call near GetLastError__epilogue_check
   194                                  
   195 0000014C E8C7060000              call near GetLastError__prologue_reset
   196                                  ; MS __fastcall x64 ABI
   197 00000151 4883EC68                sub rsp, 104 ; allocate shadow space
   198 00000155 48C744245800000000      mov qword [rsp + 88], 0 ; 12th: LPVOID lpParam
   199 0000015E 48C7442450-             mov qword [rsp + 80], GetModuleHandleA__hModule ; 11th: HINSTANCE hInstance
   199 00000163 [41010000]         
   200 00000167 48C744244800000000      mov qword [rsp + 72], 0 ; 10th: HMENU hMenu
   201 00000170 48C744244000000000      mov qword [rsp + 64], 0 ; 9th: HWND hWndParent
   202 00000179 C7442438E0010000        mov dword [rsp + 56], 480 ; 8th: int nHeight
   203 00000181 C744243080020000        mov dword [rsp + 48], 640 ; 7th: int nWidth
   204 00000189 C744242800000080        mov dword [rsp + 40], 0x80000000 ; 6th: int Y
   205 00000191 C744242000000080        mov dword [rsp + 32], 0x80000000 ; 5th: int X
   206 00000199 41B90000CF16            mov qword r9, 0x16cf0000 ; 4th: DWORD dwStyle = WS_OVERLAPPEDWINDOW | WS_VISIBLE | WS_CLIPCHILDREN | WS_CLIPSIBLINGS
   207 0000019F 49B8-                   mov qword r8, CreateWindow__title ; 3rd: LPCSTR lpWindowName
   207 000001A1 [B901000000000000] 
   208 000001A9 48BA-                   mov qword rdx, Generic__uuid ; 2nd: LPCSTR lpClassName
   208 000001AB [1401000000000000] 
   209 000001B3 B900030000              mov qword rcx, 768 ; 1st: DWORD dwExStyle = WS_EX_OVERLAPPEDWINDOW
   210 000001B8 E8(00000000)                call CreateWindowExA
   211 000001BD 48890425[B1010000]      mov qword [CreateWindow__hWnd], rax ; return HWND
   212 000001C5 4883C468                add rsp, 104 ; deallocate shadow space
   213 000001C9 E85D060000              call near GetLastError__epilogue_check
   214                                  
   215                                  Loop:
   216 000001CE E845060000              call near GetLastError__prologue_reset
   217                                  ; MS __fastcall x64 ABI
   218 000001D3 4883EC30                sub rsp, 48 ; allocate shadow space
   219 000001D7 C744242001000000        mov dword [rsp + 32], 1 ; 5th: UINT wRemoveMsg = PM_REMOVE
   220 000001DF 41B900000000            mov dword r9d, 0 ; 4th: UINT wMsgFilterMax
   221 000001E5 41B800000000            mov dword r8d, 0 ; 3rd: UINT wMsgFilterMin
   222 000001EB 488B1425[B1010000]      mov qword rdx, [CreateWindow__hWnd] ; 2nd: HWND hWnd
   223 000001F3 48B9-                   mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   223 000001F5 [C501000000000000] 
   224 000001FD E8(00000000)                call PeekMessageA
   225 00000202 890425[F1010000]        mov dword [PeekMessage_hasMsgs], eax ; return BOOL
   226 00000209 4883C430                add rsp, 48 ; deallocate shadow space
   227 0000020D E819060000              call near GetLastError__epilogue_check
   228                                  
   229 00000212 833C25[F1010000]00      cmp dword [PeekMessage_hasMsgs], 0 ; zero messages
   230 0000021A 0F84AEFFFFFF            je near Loop
   231                                  ; MS __fastcall x64 ABI
   232 00000220 4883EC40                sub rsp, 64 ; allocate shadow space
   233 00000224 48C7442430-             mov qword [rsp + 48], CreateWindow__hWnd ; 7th: va_list *Arguments
   233 00000229 [B1010000]         
   234 0000022D 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   235 00000236 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   235 0000023B [0C000000]         
   236 0000023F 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   237 00000245 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   238 0000024B BA[F5010000]            mov dword edx, debug_trace_4 ; 2nd: LPCVOID lpSource
   239 00000250 B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   240 00000255 E8(00000000)                call FormatMessageA
   241 0000025A 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   242 00000261 4883C440                add rsp, 64 ; deallocate shadow space
   243                                  
   244                                  ; MS __fastcall x64 ABI
   245 00000265 4883EC30                sub rsp, 48 ; allocate shadow space
   246 00000269 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   247 00000271 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   248 00000277 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   249 0000027F BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   250 00000284 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   251 0000028B E8(00000000)                call WriteFile
   252 00000290 4883C430                add rsp, 48 ; deallocate shadow space
   253                                  
   254 00000294 488B0425[C5010000]      mov qword rax, [IncomingMessage_1.hwnd]
   255 0000029C 48890425[32020000]      mov qword [__trace_array + 0], rax
   256 000002A4 8B0425[CD010000]        mov dword eax, [IncomingMessage_1.message]
   257 000002AB 890425[3A020000]        mov dword [__trace_array + 8], eax
   258 000002B2 488B0425[D1010000]      mov qword rax, [IncomingMessage_1.wParam]
   259 000002BA 48890425[42020000]      mov qword [__trace_array + 16], rax
   260 000002C2 488B0425[D9010000]      mov qword rax, [IncomingMessage_1.lParam]
   261 000002CA 48890425[4A020000]      mov qword [__trace_array + 24], rax
   262 000002D2 8B0425[E5010000]        mov dword eax, [IncomingMessage_1.pt.x]
   263 000002D9 890425[52020000]        mov dword [__trace_array + 32], eax
   264 000002E0 8B0425[E9010000]        mov dword eax, [IncomingMessage_1.pt.y]
   265 000002E7 890425[5A020000]        mov dword [__trace_array + 40], eax
   266 000002EE 8B0425[ED010000]        mov dword eax, [IncomingMessage_1.lPrivate]
   267 000002F5 890425[62020000]        mov dword [__trace_array + 48], eax
   268                                  ; MS __fastcall x64 ABI
   269 000002FC 4883EC40                sub rsp, 64 ; allocate shadow space
   270 00000300 48C7442430-             mov qword [rsp + 48], __trace_array ; 7th: va_list *Arguments
   270 00000305 [32020000]         
   271 00000309 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   272 00000312 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   272 00000317 [0C000000]         
   273 0000031B 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   274 00000321 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   275 00000327 BA[72020000]            mov dword edx, PeekMessage_msgIdFormatString ; 2nd: LPCVOID lpSource
   276 0000032C B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   277 00000331 E8(00000000)                call FormatMessageA
   278 00000336 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   279 0000033D 4883C440                add rsp, 64 ; deallocate shadow space
   280                                  
   281                                  ; MS __fastcall x64 ABI
   282 00000341 4883EC30                sub rsp, 48 ; allocate shadow space
   283 00000345 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   284 0000034D 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   285 00000353 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   286 0000035B BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   287 00000360 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   288 00000367 E8(00000000)                call WriteFile
   289 0000036C 4883C430                add rsp, 48 ; deallocate shadow space
   290                                  
   291 00000370 833C25[CD010000]12      cmp dword [IncomingMessage_1.message], 0x12 ; WM_QUIT
   292 00000378 0F857A000000            jne near ..@Loop__processMessage
   293                                  ; MS __fastcall x64 ABI
   294 0000037E 4883EC40                sub rsp, 64 ; allocate shadow space
   295 00000382 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   296 0000038B 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   297 00000394 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   297 00000399 [0C000000]         
   298 0000039D 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   299 000003A3 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   300 000003A9 BA[1F030000]            mov dword edx, debug_trace_1 ; 2nd: LPCVOID lpSource
   301 000003AE B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   302 000003B3 E8(00000000)                call FormatMessageA
   303 000003B8 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   304 000003BF 4883C440                add rsp, 64 ; deallocate shadow space
   305                                  
   306                                  ; MS __fastcall x64 ABI
   307 000003C3 4883EC30                sub rsp, 48 ; allocate shadow space
   308 000003C7 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   309 000003CF 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   310 000003D5 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   311 000003DD BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   312 000003E2 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   313 000003E9 E8(00000000)                call WriteFile
   314 000003EE 4883C430                add rsp, 48 ; deallocate shadow space
   315                                  
   316 000003F2 0F84D6FDFFFF            je near Loop
   317                                  ..@Loop__processMessage:
   318                                  ; MS __fastcall x64 ABI
   319 000003F8 4883EC40                sub rsp, 64 ; allocate shadow space
   320 000003FC 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   321 00000405 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   322 0000040E 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   322 00000413 [0C000000]         
   323 00000417 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   324 0000041D 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   325 00000423 BA[3F030000]            mov dword edx, debug_trace_5 ; 2nd: LPCVOID lpSource
   326 00000428 B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   327 0000042D E8(00000000)                call FormatMessageA
   328 00000432 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   329 00000439 4883C440                add rsp, 64 ; deallocate shadow space
   330                                  
   331                                  ; MS __fastcall x64 ABI
   332 0000043D 4883EC30                sub rsp, 48 ; allocate shadow space
   333 00000441 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   334 00000449 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   335 0000044F 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   336 00000457 BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   337 0000045C 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   338 00000463 E8(00000000)                call WriteFile
   339 00000468 4883C430                add rsp, 48 ; deallocate shadow space
   340                                  
   341 0000046C E8A7030000              call near GetLastError__prologue_reset
   342                                  ; MS __fastcall x64 ABI
   343 00000471 4883EC28                sub rsp, 40 ; allocate shadow space
   344 00000475 48B9-                   mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   344 00000477 [C501000000000000] 
   345 0000047F E8(00000000)                call TranslateMessage
   346 00000484 4883C428                add rsp, 40 ; deallocate shadow space
   347 00000488 E89E030000              call near GetLastError__epilogue_check
   348                                  
   349                                  ; MS __fastcall x64 ABI
   350 0000048D 4883EC40                sub rsp, 64 ; allocate shadow space
   351 00000491 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   352 0000049A 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   353 000004A3 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   353 000004A8 [0C000000]         
   354 000004AC 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   355 000004B2 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   356 000004B8 BA[51030000]            mov dword edx, debug_trace_5a ; 2nd: LPCVOID lpSource
   357 000004BD B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   358 000004C2 E8(00000000)                call FormatMessageA
   359 000004C7 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   360 000004CE 4883C440                add rsp, 64 ; deallocate shadow space
   361                                  
   362                                  ; MS __fastcall x64 ABI
   363 000004D2 4883EC30                sub rsp, 48 ; allocate shadow space
   364 000004D6 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   365 000004DE 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   366 000004E4 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   367 000004EC BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   368 000004F1 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   369 000004F8 E8(00000000)                call WriteFile
   370 000004FD 4883C430                add rsp, 48 ; deallocate shadow space
   371                                  
   372 00000501 E812030000              call near GetLastError__prologue_reset
   373                                  ; MS __fastcall x64 ABI
   374 00000506 4883EC28                sub rsp, 40 ; allocate shadow space
   375 0000050A 48B9-                   mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   375 0000050C [C501000000000000] 
   376 00000514 E8(00000000)                call DispatchMessageA
   377 00000519 4883C428                add rsp, 40 ; deallocate shadow space
   378 0000051D E809030000              call near GetLastError__epilogue_check
   379                                  
   380 00000522 E9A7FCFFFF              jmp near Loop
   381                                  
   382                                  WndProc:
   383 00000527 48890C25[63030000]      mov qword [nWndProc__hWnd], rcx
   384 0000052F 48891425[6B030000]      mov qword [nWndProc__uMsg], rdx
   385 00000537 4C890425[73030000]      mov qword [nWndProc__wParam], r8
   386 0000053F 4C890C25[7B030000]      mov qword [nWndProc__lParam], r9
   387 00000547 4883FA06                cmp rdx, 0x6
   388 0000054B 0F8483000000            je near WndProc__WM_Activate
   389 00000551 4881FA12010000          cmp rdx, 0x112
   390 00000558 0F8479000000            je near WndProc__WM_SysCommand
   391 0000055E 4883FA10                cmp rdx, 0x10
   392 00000562 0F8496000000            je near WndProc__WM_Close
   393 00000568 4881FA00010000          cmp rdx, 0x100
   394 0000056F 0F849A020000            je near WndProc__WM_KeyDown
   395 00000575 4881FA01010000          cmp rdx, 0x101
   396 0000057C 0F8490020000            je near WndProc__WM_KeyUp
   397 00000582 4883FA05                cmp rdx, 0x5
   398 00000586 0F8489020000            je near WndProc__WM_Size
   399                                  ..@WndProc__default:
   400 0000058C E887020000              call near GetLastError__prologue_reset
   401                                  ; MS __fastcall x64 ABI
   402 00000591 4883EC28                sub rsp, 40 ; allocate shadow space
   403 00000595 4C8B0C25[7B030000]      mov qword r9, [nWndProc__lParam] ; 4th: 
   404 0000059D 4C8B0425[73030000]      mov qword r8, [nWndProc__wParam] ; 3rd: 
   405 000005A5 488B1425[6B030000]      mov qword rdx, [nWndProc__uMsg] ; 2nd: 
   406 000005AD 488B0C25[63030000]      mov qword rcx, [nWndProc__hWnd] ; 1st: 
   407 000005B5 E8(00000000)                call DefWindowProcA
   408 000005BA 48890425[83030000]      mov qword [nWndProc__return], rax ; return 
   409 000005C2 4883C428                add rsp, 40 ; deallocate shadow space
   410 000005C6 E860020000              call near GetLastError__epilogue_check
   411                                  
   412 000005CB 488B0425[83030000]      mov qword rax, [nWndProc__return]
   413 000005D3 C3                      ret
   414                                  WndProc__WM_Activate:
   415 000005D4 31C0                    xor eax, eax
   416 000005D6 C3                      ret
   417                                  WndProc__WM_SysCommand:
   418 000005D7 8B1C25[73030000]        mov ebx, [nWndProc__wParam]
   419 000005DE 81FB40F10000            cmp ebx, 0xf140
   420 000005E4 0F8411000000            je near ..@return_zero
   421 000005EA 81FB70F10000            cmp ebx, 0xf170
   422 000005F0 0F8405000000            je near ..@return_zero
   423 000005F6 E991FFFFFF              jmp near ..@WndProc__default
   424                                  ..@return_zero:
   425 000005FB 31C0                    xor eax, eax
   426 000005FD C3                      ret
   427                                  WndProc__WM_Close:
   428                                  ; MS __fastcall x64 ABI
   429 000005FE 4883EC40                sub rsp, 64 ; allocate shadow space
   430 00000602 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   431 0000060B 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   432 00000614 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   432 00000619 [0C000000]         
   433 0000061D 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   434 00000623 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   435 00000629 BA[8B030000]            mov dword edx, debug_trace_2 ; 2nd: LPCVOID lpSource
   436 0000062E B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   437 00000633 E8(00000000)                call FormatMessageA
   438 00000638 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   439 0000063F 4883C440                add rsp, 64 ; deallocate shadow space
   440                                  
   441                                  ; MS __fastcall x64 ABI
   442 00000643 4883EC30                sub rsp, 48 ; allocate shadow space
   443 00000647 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   444 0000064F 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   445 00000655 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   446 0000065D BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   447 00000662 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   448 00000669 E8(00000000)                call WriteFile
   449 0000066E 4883C430                add rsp, 48 ; deallocate shadow space
   450                                  
   451 00000672 E8A1010000              call near GetLastError__prologue_reset
   452                                  ; MS __fastcall x64 ABI
   453 00000677 4883EC28                sub rsp, 40 ; allocate shadow space
   454 0000067B 488B0C25[B1010000]      mov qword rcx, [CreateWindow__hWnd] ; 1st: HWND hWnd
   455 00000683 E8(00000000)                call DestroyWindow
   456 00000688 4883C428                add rsp, 40 ; deallocate shadow space
   457 0000068C E89A010000              call near GetLastError__epilogue_check
   458                                  
   459                                  ; MS __fastcall x64 ABI
   460 00000691 4883EC40                sub rsp, 64 ; allocate shadow space
   461 00000695 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   462 0000069E 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   463 000006A7 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   463 000006AC [0C000000]         
   464 000006B0 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   465 000006B6 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   466 000006BC BA[AA030000]            mov dword edx, debug_trace_7 ; 2nd: LPCVOID lpSource
   467 000006C1 B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   468 000006C6 E8(00000000)                call FormatMessageA
   469 000006CB 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   470 000006D2 4883C440                add rsp, 64 ; deallocate shadow space
   471                                  
   472                                  ; MS __fastcall x64 ABI
   473 000006D6 4883EC30                sub rsp, 48 ; allocate shadow space
   474 000006DA C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   475 000006E2 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   476 000006E8 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   477 000006F0 BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   478 000006F5 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   479 000006FC E8(00000000)                call WriteFile
   480 00000701 4883C430                add rsp, 48 ; deallocate shadow space
   481                                  
   482 00000705 31C0                    xor eax, eax
   483 00000707 C3                      ret
   484                                  WndProc__WM_Destroy:
   485                                  ; MS __fastcall x64 ABI
   486 00000708 4883EC40                sub rsp, 64 ; allocate shadow space
   487 0000070C 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   488 00000715 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   489 0000071E 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   489 00000723 [0C000000]         
   490 00000727 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   491 0000072D 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   492 00000733 BA[BE030000]            mov dword edx, debug_trace_3 ; 2nd: LPCVOID lpSource
   493 00000738 B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   494 0000073D E8(00000000)                call FormatMessageA
   495 00000742 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   496 00000749 4883C440                add rsp, 64 ; deallocate shadow space
   497                                  
   498                                  ; MS __fastcall x64 ABI
   499 0000074D 4883EC30                sub rsp, 48 ; allocate shadow space
   500 00000751 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   501 00000759 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   502 0000075F 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   503 00000767 BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   504 0000076C 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   505 00000773 E8(00000000)                call WriteFile
   506 00000778 4883C430                add rsp, 48 ; deallocate shadow space
   507                                  
   508 0000077C E897000000              call near GetLastError__prologue_reset
   509                                  ; MS __fastcall x64 ABI
   510 00000781 4883EC28                sub rsp, 40 ; allocate shadow space
   511 00000785 B900000000              mov dword ecx, 0 ; 1st: int nExitCode
   512 0000078A E8(00000000)                call PostQuitMessage
   513 0000078F 4883C428                add rsp, 40 ; deallocate shadow space
   514 00000793 E893000000              call near GetLastError__epilogue_check
   515                                  
   516                                  ; MS __fastcall x64 ABI
   517 00000798 4883EC40                sub rsp, 64 ; allocate shadow space
   518 0000079C 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   519 000007A5 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   520 000007AE 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   520 000007B3 [0C000000]         
   521 000007B7 41B900000000            mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   522 000007BD 41B800000000            mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   523 000007C3 BA[DF030000]            mov dword edx, debug_trace_8 ; 2nd: LPCVOID lpSource
   524 000007C8 B900240000              mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   525 000007CD E8(00000000)                call FormatMessageA
   526 000007D2 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   527 000007D9 4883C440                add rsp, 64 ; deallocate shadow space
   528                                  
   529                                  ; MS __fastcall x64 ABI
   530 000007DD 4883EC30                sub rsp, 48 ; allocate shadow space
   531 000007E1 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   532 000007E9 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   533 000007EF 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   534 000007F7 BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   535 000007FC 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   536 00000803 E8(00000000)                call WriteFile
   537 00000808 4883C430                add rsp, 48 ; deallocate shadow space
   538                                  
   539 0000080C 31C0                    xor eax, eax
   540 0000080E C3                      ret
   541                                  WndProc__WM_KeyDown:
   542 0000080F 31C0                    xor eax, eax
   543 00000811 C3                      ret
   544                                  WndProc__WM_KeyUp:
   545 00000812 31C0                    xor eax, eax
   546 00000814 C3                      ret
   547                                  WndProc__WM_Size:
   548 00000815 31C0                    xor eax, eax
   549 00000817 C3                      ret
   550                                  
   551                                  GetLastError__prologue_reset:
   552                                  ; MS __fastcall x64 ABI
   553 00000818 4883EC28                sub rsp, 40 ; allocate shadow space
   554 0000081C B900000000              mov dword ecx, 0 ; 1st: DWORD dwErrCode
   555 00000821 E8(00000000)                call SetLastError
   556 00000826 4883C428                add rsp, 40 ; deallocate shadow space
   557 0000082A C3                      ret
   558                                  
   559                                  GetLastError__epilogue_check:
   560                                  ; MS __fastcall x64 ABI
   561 0000082B 4883EC28                sub rsp, 40 ; allocate shadow space
   562 0000082F E8(00000000)                call GetLastError
   563 00000834 890425[00000000]        mov dword [GetLastError__errCode], eax ; return 
   564 0000083B 4883C428                add rsp, 40 ; deallocate shadow space
   565 0000083F 4883F800                cmp rax, 0
   566 00000843 7501                    jne ..@error
   567 00000845 C3                      ret
   568                                  
   569                                  ..@error:
   570                                  ; MS __fastcall x64 ABI
   571 00000846 4883EC40                sub rsp, 64 ; allocate shadow space
   572 0000084A 48C744243000000000      mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   573 00000853 48C744242800010000      mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   574 0000085C 48C7442420-             mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   574 00000861 [0C000000]         
   575 00000865 41B900040000            mov dword r9d, 0x400 ; 4th: DWORD dwLanguageId
   576 0000086B 448B0425[00000000]      mov dword r8d, [GetLastError__errCode] ; 3rd: DWORD dwMessageId
   577 00000873 BA00000000              mov dword edx, 0 ; 2nd: LPCVOID lpSource
   578 00000878 B900120000              mov dword ecx, 0x1200 ; 1st: DWORD dwFlags
   579 0000087D E8(00000000)                call FormatMessageA
   580 00000882 890425[0C010000]        mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   581 00000889 4883C440                add rsp, 64 ; deallocate shadow space
   582                                  
   583                                  ; MS __fastcall x64 ABI
   584 0000088D 4883EC30                sub rsp, 48 ; allocate shadow space
   585 00000891 C744242000000000        mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   586 00000899 41B9[10010000]          mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   587 0000089F 448B0425[0C010000]      mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   588 000008A7 BA[0C000000]            mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   589 000008AC 8B0C25[08000000]        mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   590 000008B3 E8(00000000)                call WriteFile
   591 000008B8 4883C430                add rsp, 48 ; deallocate shadow space
   592                                  
   593 000008BC 8B0C25[00000000]        mov ecx, [GetLastError__errCode] ; UINT uExitCode
   594 000008C3 E900000000              jmp near Exit
   595                                  
   596                                  Exit:
   597                                  ; MS __fastcall x64 ABI
   598 000008C8 4883EC28                sub rsp, 40 ; allocate shadow space
   599 000008CC E8(00000000)                call ExitProcess
   600 000008D1 4883C428                add rsp, 40 ; deallocate shadow space
   601                                  
   602                                  

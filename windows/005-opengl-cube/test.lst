     1                                  ; GOAL: Render OpenGL spinning 3d cube animation
     2                                  ; 
     3                                  ; TODO: could make it so i don't check for GetLastError unless a proc returns 0
     4                                  ; TODO: output to log file in relative path instead of showing console window
     5                                  extern SetLastError
     6                                  extern GetLastError
     7                                  extern FormatMessageA
     8                                  extern WriteFile
     9                                  extern ExitProcess
    10                                  extern GetStdHandle
    11                                  extern CreateMutexA
    12                                  extern GetModuleHandleA
    13                                  extern LoadImageA
    14                                  extern RegisterClassExA
    15                                  extern CreateWindowExA
    16                                  extern GetDC
    17                                  extern ChoosePixelFormat
    18                                  extern SetPixelFormat
    19                                  extern LoadLibraryA
    20                                  extern GetProcAddress
    21                                  extern PeekMessageA
    22                                  extern TranslateMessage
    23                                  extern DispatchMessageA
    24                                  extern SwapBuffers
    25                                  extern DefWindowProcA
    26                                  extern DestroyWindow
    27                                  extern PostQuitMessage
    28                                  
    29                                  section .data align=16
    30 00000000 00000000                GetLastError__errCode: dd 0
    31 00000004 00000000                glGetError__code: dd 0
    32 00000008 00000000                Console__stderr_nStdHandle: dd 0
    33 0000000C 00000000                Console__stdout_nStdHandle: dd 0
    34 00000010 00<rept>                FormatMessage__tmpReturnBuffer: times 256 db 0
    35 00000110 00000000                FormatMessage__tmpReturnBufferLength: dd 0
    36 00000114 676C4572726F722025-     glGetError__str: db "glError %1!.8llX!",10,0
    36 0000011D 31212E386C6C58210A-
    36 00000126 00                 
    37 00000127 00000000                Console__bytesWritten: dd 0
    38                                  ; generic reusable uuid any time an api function wants a string identifier
    39 0000012B 30376236323331342D-     Generic__uuid: db "07b62314-d4fc-4704-96e8-c31eb378d815",0
    39 00000134 643466632D34373034-
    39 0000013D 2D393665382D633331-
    39 00000146 656233373864383135-
    39 0000014F 00                 
    40 00000150 0000000000000000        CreateMutexA__handle: dq 0
    41 00000158 0000000000000000        GetModuleHandleA__hModule: dq 0
    42 00000160 0000000000000000        CreateWindow__icon: dq 0
    43 00000168 0000000000000000        CreateWindow__cursor: dq 0
    44                                  
    45                                  ; struct
    46                                  MainWindow_1: ; instanceof tagWNDCLASSEXA
    47 00000170 50000000                MainWindow_1.cbSize dd 80 ; UINT
    48 00000174 23000000                MainWindow_1.style dd 0x23 ; UINT = CS_OWNDC | CS_VREDRAW | CS_HREDRAW
    49 00000178 [E804000000000000]      MainWindow_1.lpfnWndProc dq WndProc ; WNDPROC
    50 00000180 00000000                MainWindow_1.cbClsExtra dd 0 ; int
    51 00000184 00000000                MainWindow_1.cbWndExtra dd 0 ; int
    52 00000188 [5801000000000000]      MainWindow_1.hInstance dq GetModuleHandleA__hModule ; HINSTANCE
    53 00000190 [6001000000000000]      MainWindow_1.hIcon dq CreateWindow__icon ; HICON
    54 00000198 [6801000000000000]      MainWindow_1.hCursor dq CreateWindow__cursor ; HCURSOR
    55 000001A0 0000000000000000        MainWindow_1.hbrBackground dq 0 ; HBRUSH
    56 000001A8 0000000000000000        MainWindow_1.lpszMenuName dq 0 ; LPCSTR
    57 000001B0 [2B01000000000000]      MainWindow_1.lpszClassName dq Generic__uuid ; LPCSTR
    58 000001B8 0000000000000000        MainWindow_1.hIconSm dq 0 ; HICON
    59                                  
    60 000001C0 4F70656E474C204465-     CreateWindow__title: db "OpenGL Demo",0
    60 000001C9 6D6F00             
    61 000001CC 0000000000000000        CreateWindow__atom_name: dq 0
    62 000001D4 0000000000000000        CreateWindow__hWnd: dq 0
    63 000001DC 0000000000000000        GetDC__hDC: dq 0
    64                                  
    65                                  ; struct
    66                                  PixelFormat_1: ; instanceof PIXELFORMATDESCRIPTOR
    67 000001E4 2800                    PixelFormat_1.nSize dw 40 ; word sizeof(struct)
    68 000001E6 0100                    PixelFormat_1.nVersion dw 1 ; word (magic constant)
    69 000001E8 25000000                PixelFormat_1.dwFlags dd 0x25 ; dword = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER
    70 000001EC 00                      PixelFormat_1.iPixelType db 0 ; byte = PFD_TYPE_RGBA
    71 000001ED 18                      PixelFormat_1.cColorBits db 24 ; byte (24-bit color depth)
    72 000001EE 00                      PixelFormat_1.cRedBits db 0 ; byte (not used)
    73 000001EF 00                      PixelFormat_1.cRedShift db 0 ; byte (not used)
    74 000001F0 00                      PixelFormat_1.cGreenBits db 0 ; byte (not used)
    75 000001F1 00                      PixelFormat_1.cGreenShift db 0 ; byte (not used)
    76 000001F2 00                      PixelFormat_1.cBlueBits db 0 ; byte (not used)
    77 000001F3 00                      PixelFormat_1.cBlueShift db 0 ; byte (not used)
    78 000001F4 00                      PixelFormat_1.cAlphaBits db 0 ; byte (no alpha buffer)
    79 000001F5 00                      PixelFormat_1.cAlphaShift db 0 ; byte (not used)
    80 000001F6 00                      PixelFormat_1.cAccumBits db 0 ; byte (no accumulation buffer)
    81 000001F7 00                      PixelFormat_1.cAccumRedBits db 0 ; byte (not used)
    82 000001F8 00                      PixelFormat_1.cAccumGreenBits db 0 ; byte (not used)
    83 000001F9 00                      PixelFormat_1.cAccumBlueBits db 0 ; byte (not used)
    84 000001FA 00                      PixelFormat_1.cAccumAlphaBits db 0 ; byte (not used)
    85 000001FB 20                      PixelFormat_1.cDepthBits db 32 ; byte (32-bit z-buffer)
    86 000001FC 00                      PixelFormat_1.cStencilBits db 0 ; byte (no stencil buffer)
    87 000001FD 00                      PixelFormat_1.cAuxBuffers db 0 ; byte (no auxiliary buffer)
    88 000001FE 00                      PixelFormat_1.iLayerType db 0 ; byte = PFD_MAIN_PLANE
    89 000001FF 00                      PixelFormat_1.bReserved db 0 ; byte (not used)
    90 00000200 00000000                PixelFormat_1.dwLayerMask dd 0 ; dword (not used)
    91 00000204 00000000                PixelFormat_1.dwVisibleMask dd 0 ; dword (not used)
    92 00000208 00000000                PixelFormat_1.dwDamageMask dd 0 ; dword (not used)
    93                                  
    94 0000020C 00000000                ChoosePixelFormat__format: dd 0
    95 00000210 00000000                SetPixelFormat__success: dd 0
    96 00000214 6F70656E676C33322E-     LoadLibraryA__opengl32: db "opengl32.dll",0
    96 0000021D 646C6C00           
    97 00000221 0000000000000000        LoadLibraryA__opengl32_hModule: dq 0
    98 00000229 0000000000000000        wglCreateContext: dq 0
    99 00000231 77676C437265617465-     GetProcAddress__wglCreateContext: db "wglCreateContext",0
    99 0000023A 436F6E7465787400   
   100 00000242 0000000000000000        wglMakeCurrent: dq 0
   101 0000024A 77676C4D616B654375-     GetProcAddress__wglMakeCurrent: db "wglMakeCurrent",0
   101 00000253 7272656E7400       
   102 00000259 0000000000000000        glClearColor: dq 0
   103 00000261 676C436C656172436F-     GetProcAddress__glClearColor: db "glClearColor",0
   103 0000026A 6C6F7200           
   104 0000026E 0000000000000000        glClear: dq 0
   105 00000276 676C436C65617200        GetProcAddress__glClear: db "glClear",0
   106 0000027E 0000000000000000        glGetError: dq 0
   107 00000286 676C4765744572726F-     GetProcAddress__glGetError: db "glGetError",0
   107 0000028F 7200               
   108 00000291 0000000000000000        wglCreateContext__ctx: dq 0
   109 00000299 00000000                wglMakeCurrent__success: dd 0
   110 0000029D 0000000000000000        F_0: dq 0x00000000
   111 000002A5 0000803F00000000        F_1: dq 0x3f800000
   112                                  
   113                                  ; struct
   114                                  IncomingMessage_1: ; instanceof tagMSG
   115 000002AD 0000000000000000        IncomingMessage_1.hwnd dq 0 ; HWND
   116 000002B5 00000000                IncomingMessage_1.message dd 0 ; UINT
   117 000002B9 0000000000000000        IncomingMessage_1.wParam dq 0 ; WPARAM
   118 000002C1 0000000000000000        IncomingMessage_1.lParam dq 0 ; LPARAM
   119 000002C9 00000000                IncomingMessage_1.time dd 0 ; dword
   120 000002CD 00000000                IncomingMessage_1.pt.x dd 0 ; dword
   121 000002D1 00000000                IncomingMessage_1.pt.y dd 0 ; dword
   122 000002D5 00000000                IncomingMessage_1.lPrivate dd 0 ; dword
   123                                  
   124 000002D9 00000000                PeekMessage_hasMsgs: dd 0
   125 000002DD 00000000                SwapBuffers__success: dd 0
   126 000002E1 0000000000000000        WndProc__hWnd: dq 0
   127 000002E9 0000000000000000        WndProc__uMsg: dq 0
   128 000002F1 0000000000000000        WndProc__wParam: dq 0
   129 000002F9 0000000000000000        WndProc__lParam: dq 0
   130 00000301 0000000000000000        WndProc__return: dq 0
   131                                  
   132                                  section .text align=16
   133                                  global main
   134                                  main:
   135                                  
   136                                  ; get pointers to stdout/stderr pipes
   137 00000000 E815060000                  call GetLastError__prologue_reset
   138                                      ; MS __fastcall x64 ABI
   139 00000005 4883EC28                    sub rsp, 40 ; allocate shadow space
   140 00000009 B9F4FFFFFF                  mov dword ecx, -12 ; 1st: DWORD nStdHandle = STD_ERROR_HANDLE
   141 0000000E E8(00000000)            call GetStdHandle
   142 00000013 890425[08000000]            mov dword [Console__stderr_nStdHandle], eax ; return 
   143 0000001A 4883C428                    add rsp, 40 ; deallocate shadow space
   144 0000001E E80A060000                  call GetLastError__epilogue_check
   145                                  
   146 00000023 E8F2050000                  call GetLastError__prologue_reset
   147                                      ; MS __fastcall x64 ABI
   148 00000028 4883EC28                    sub rsp, 40 ; allocate shadow space
   149 0000002C B9F5FFFFFF                  mov dword ecx, -11 ; 1st: DWORD nStdHandle = STD_OUTPUT_HANDLE
   150 00000031 E8(00000000)            call GetStdHandle
   151 00000036 890425[0C000000]            mov dword [Console__stdout_nStdHandle], eax ; return 
   152 0000003D 4883C428                    add rsp, 40 ; deallocate shadow space
   153 00000041 E8E7050000                  call GetLastError__epilogue_check
   154                                  
   155                                  
   156                                  ; verify the window is not open twice
   157 00000046 E8CF050000                  call GetLastError__prologue_reset
   158                                      ; MS __fastcall x64 ABI
   159 0000004B 4883EC28                    sub rsp, 40 ; allocate shadow space
   160 0000004F 41B8[2B010000]              mov dword r8d, Generic__uuid ; 3rd: LPCSTR lpName
   161 00000055 BA01000000                  mov dword edx, 1 ; 2nd: BOOL bInitialOwner
   162 0000005A B900000000                  mov dword ecx, 0 ; 1st: LPSECURITY_ATTRIBUTES lpMutexAttributes
   163 0000005F E8(00000000)            call CreateMutexA
   164 00000064 48890425[50010000]          mov qword [CreateMutexA__handle], rax ; return HANDLE
   165 0000006C 4883C428                    add rsp, 40 ; deallocate shadow space
   166 00000070 E8B8050000                  call GetLastError__epilogue_check
   167                                  
   168                                  ; get a pointer to this process for use with api functions which require it 
   169                                  ; Note that as of 32-bit Windows, an instance handle (HINSTANCE), such as the
   170                                  ; application instance handle exposed by system function call of WinMain, and
   171                                  ; a module handle (HMODULE) are the same thing.
   172 00000075 E8A0050000                  call GetLastError__prologue_reset
   173                                      ; MS __fastcall x64 ABI
   174 0000007A 4883EC28                    sub rsp, 40 ; allocate shadow space
   175 0000007E B900000000                  mov dword ecx, 0 ; 1st: LPCSTR lpModuleName
   176 00000083 E8(00000000)            call GetModuleHandleA
   177 00000088 48890425[58010000]          mov qword [GetModuleHandleA__hModule], rax ; return HMODULE *phModule
   178 00000090 4883C428                    add rsp, 40 ; deallocate shadow space
   179 00000094 E894050000                  call GetLastError__epilogue_check
   180                                  
   181                                  ; load references to the default icons for new windows
   182 00000099 E87C050000                  call GetLastError__prologue_reset
   183                                      ; MS __fastcall x64 ABI
   184 0000009E 4883EC38                    sub rsp, 56 ; allocate shadow space
   185 000000A2 C744242840800000            mov dword [rsp + 40], 0x8040 ; 6th: UINT fuLoad
   186 000000AA C744242000000000            mov dword [rsp + 32], 0 ; 5th: int cy
   187 000000B2 41B900000000                mov dword r9d, 0 ; 4th: int cx
   188 000000B8 41B801000000                mov dword r8d, 1 ; 3rd: UINT type
   189 000000BE BA057F0000                  mov dword edx, 32517 ; 2nd: LPCSTR name
   190 000000C3 B900000000                  mov dword ecx, 0 ; 1st: HINSTANCE hInst
   191 000000C8 E8(00000000)            call LoadImageA
   192 000000CD 48890425[60010000]          mov qword [CreateWindow__icon], rax ; return HANDLE
   193 000000D5 4883C438                    add rsp, 56 ; deallocate shadow space
   194 000000D9 E84F050000                  call GetLastError__epilogue_check
   195                                  
   196 000000DE E837050000                  call GetLastError__prologue_reset
   197                                      ; MS __fastcall x64 ABI
   198 000000E3 4883EC38                    sub rsp, 56 ; allocate shadow space
   199 000000E7 C744242840800000            mov dword [rsp + 40], 0x8040 ; 6th: UINT fuLoad
   200 000000EF C744242000000000            mov dword [rsp + 32], 0 ; 5th: int cy
   201 000000F7 41B900000000                mov dword r9d, 0 ; 4th: int cx
   202 000000FD 41B802000000                mov dword r8d, 2 ; 3rd: UINT type
   203 00000103 BA007F0000                  mov dword edx, 32512 ; 2nd: LPCSTR name
   204 00000108 B900000000                  mov dword ecx, 0 ; 1st: HINSTANCE hInst
   205 0000010D E8(00000000)            call LoadImageA
   206 00000112 48890425[68010000]          mov qword [CreateWindow__cursor], rax ; return HANDLE
   207 0000011A 4883C438                    add rsp, 56 ; deallocate shadow space
   208 0000011E E80A050000                  call GetLastError__epilogue_check
   209                                  
   210                                  ; begin creating the main local application window
   211 00000123 E8F2040000                  call GetLastError__prologue_reset
   212                                      ; MS __fastcall x64 ABI
   213 00000128 4883EC28                    sub rsp, 40 ; allocate shadow space
   214 0000012C 48B9-                       mov qword rcx, MainWindow_1 ; 1st: WNDCLASSEXA *Arg1
   214 0000012E [7001000000000000] 
   215 00000136 E8(00000000)            call RegisterClassExA
   216 0000013B 48890425[CC010000]          mov qword [CreateWindow__atom_name], rax ; return HANDLE
   217 00000143 4883C428                    add rsp, 40 ; deallocate shadow space
   218 00000147 E8E1040000                  call GetLastError__epilogue_check
   219                                  
   220 0000014C E8C9040000                  call GetLastError__prologue_reset
   221                                      ; MS __fastcall x64 ABI
   222 00000151 4883EC68                    sub rsp, 104 ; allocate shadow space
   223 00000155 48C744245800000000          mov qword [rsp + 88], 0 ; 12th: LPVOID lpParam
   224 0000015E 48C7442450-                 mov qword [rsp + 80], GetModuleHandleA__hModule ; 11th: HINSTANCE hInstance
   224 00000163 [58010000]         
   225 00000167 48C744244800000000          mov qword [rsp + 72], 0 ; 10th: HMENU hMenu
   226 00000170 48C744244000000000          mov qword [rsp + 64], 0 ; 9th: HWND hWndParent
   227 00000179 C7442438E0010000            mov dword [rsp + 56], 480 ; 8th: int nHeight
   228 00000181 C744243080020000            mov dword [rsp + 48], 640 ; 7th: int nWidth
   229 00000189 C744242800000080            mov dword [rsp + 40], 0x80000000 ; 6th: int Y
   230 00000191 C744242000000080            mov dword [rsp + 32], 0x80000000 ; 5th: int X
   231 00000199 41B90000CF16                mov qword r9, 0x16cf0000 ; 4th: DWORD dwStyle
   232 0000019F 49B8-                       mov qword r8, CreateWindow__title ; 3rd: LPCSTR lpWindowName
   232 000001A1 [C001000000000000] 
   233 000001A9 48BA-                       mov qword rdx, Generic__uuid ; 2nd: LPCSTR lpClassName
   233 000001AB [2B01000000000000] 
   234 000001B3 B900030000                  mov qword rcx, 768 ; 1st: DWORD dwExStyle
   235 000001B8 E8(00000000)            call CreateWindowExA
   236 000001BD 48890425[D4010000]          mov qword [CreateWindow__hWnd], rax ; return HANDLE
   237 000001C5 4883C468                    add rsp, 104 ; deallocate shadow space
   238 000001C9 E85F040000                  call GetLastError__epilogue_check
   239                                  
   240                                  ; begin creating the OpenGL context
   241 000001CE E847040000                  call GetLastError__prologue_reset
   242                                      ; MS __fastcall x64 ABI
   243 000001D3 4883EC28                    sub rsp, 40 ; allocate shadow space
   244 000001D7 488B0C25[D4010000]          mov qword rcx, [CreateWindow__hWnd] ; 1st: HWND hWnd
   245 000001DF E8(00000000)            call GetDC
   246 000001E4 48890425[DC010000]          mov qword [GetDC__hDC], rax ; return HDC
   247 000001EC 4883C428                    add rsp, 40 ; deallocate shadow space
   248 000001F0 E838040000                  call GetLastError__epilogue_check
   249                                  
   250 000001F5 E820040000                  call GetLastError__prologue_reset
   251                                      ; MS __fastcall x64 ABI
   252 000001FA 4883EC28                    sub rsp, 40 ; allocate shadow space
   253 000001FE 48BA-                       mov qword rdx, PixelFormat_1 ; 2nd: PIXELFORMATDESCRIPTOR *ppfd
   253 00000200 [E401000000000000] 
   254 00000208 488B0C25[DC010000]          mov qword rcx, [GetDC__hDC] ; 1st: HDC hdc
   255 00000210 E8(00000000)            call ChoosePixelFormat
   256 00000215 890425[0C020000]            mov dword [ChoosePixelFormat__format], eax ; return int
   257 0000021C 4883C428                    add rsp, 40 ; deallocate shadow space
   258 00000220 E808040000                  call GetLastError__epilogue_check
   259                                  
   260 00000225 E8F0030000                  call GetLastError__prologue_reset
   261                                      ; MS __fastcall x64 ABI
   262 0000022A 4883EC28                    sub rsp, 40 ; allocate shadow space
   263 0000022E 49B8-                       mov qword r8, PixelFormat_1 ; 3rd: PIXELFORMATDESCRIPTOR *ppfd
   263 00000230 [E401000000000000] 
   264 00000238 8B1425[0C020000]            mov dword edx, [ChoosePixelFormat__format] ; 2nd: int format
   265 0000023F 488B0C25[DC010000]          mov qword rcx, [GetDC__hDC] ; 1st: HDC hdc
   266 00000247 E8(00000000)            call SetPixelFormat
   267 0000024C 890425[10020000]            mov dword [SetPixelFormat__success], eax ; return BOOL
   268 00000253 4883C428                    add rsp, 40 ; deallocate shadow space
   269 00000257 E8D1030000                  call GetLastError__epilogue_check
   270                                  
   271                                  ; dynamically load library at runtime
   272 0000025C E8B9030000                  call GetLastError__prologue_reset
   273                                      ; MS __fastcall x64 ABI
   274 00000261 4883EC28                    sub rsp, 40 ; allocate shadow space
   275 00000265 48B9-                       mov qword rcx, LoadLibraryA__opengl32 ; 1st: LPCSTR lpLibFileName
   275 00000267 [1402000000000000] 
   276 0000026F E8(00000000)            call LoadLibraryA
   277 00000274 48890425[21020000]          mov qword [LoadLibraryA__opengl32_hModule], rax ; return HMODULE
   278 0000027C 4883C428                    add rsp, 40 ; deallocate shadow space
   279 00000280 E8A8030000                  call GetLastError__epilogue_check
   280                                  
   281 00000285 E890030000                  call GetLastError__prologue_reset
   282                                      ; MS __fastcall x64 ABI
   283 0000028A 4883EC28                    sub rsp, 40 ; allocate shadow space
   284 0000028E BA[31020000]                mov dword edx, GetProcAddress__wglCreateContext ; 2nd: LPCSTR lpProcName
   285 00000293 488B0C25[21020000]          mov qword rcx, [LoadLibraryA__opengl32_hModule] ; 1st: HMODULE hModule
   286 0000029B E8(00000000)            call GetProcAddress
   287 000002A0 48890425[29020000]          mov qword [wglCreateContext], rax ; return FARPROC
   288 000002A8 4883C428                    add rsp, 40 ; deallocate shadow space
   289 000002AC E87C030000                  call GetLastError__epilogue_check
   290                                  
   291 000002B1 E864030000                  call GetLastError__prologue_reset
   292                                      ; MS __fastcall x64 ABI
   293 000002B6 4883EC28                    sub rsp, 40 ; allocate shadow space
   294 000002BA BA[4A020000]                mov dword edx, GetProcAddress__wglMakeCurrent ; 2nd: LPCSTR lpProcName
   295 000002BF 488B0C25[21020000]          mov qword rcx, [LoadLibraryA__opengl32_hModule] ; 1st: HMODULE hModule
   296 000002C7 E8(00000000)            call GetProcAddress
   297 000002CC 48890425[42020000]          mov qword [wglMakeCurrent], rax ; return FARPROC
   298 000002D4 4883C428                    add rsp, 40 ; deallocate shadow space
   299 000002D8 E850030000                  call GetLastError__epilogue_check
   300                                  
   301 000002DD E838030000                  call GetLastError__prologue_reset
   302                                      ; MS __fastcall x64 ABI
   303 000002E2 4883EC28                    sub rsp, 40 ; allocate shadow space
   304 000002E6 BA[61020000]                mov dword edx, GetProcAddress__glClearColor ; 2nd: LPCSTR lpProcName
   305 000002EB 488B0C25[21020000]          mov qword rcx, [LoadLibraryA__opengl32_hModule] ; 1st: HMODULE hModule
   306 000002F3 E8(00000000)            call GetProcAddress
   307 000002F8 48890425[59020000]          mov qword [glClearColor], rax ; return FARPROC
   308 00000300 4883C428                    add rsp, 40 ; deallocate shadow space
   309 00000304 E824030000                  call GetLastError__epilogue_check
   310                                  
   311 00000309 E80C030000                  call GetLastError__prologue_reset
   312                                      ; MS __fastcall x64 ABI
   313 0000030E 4883EC28                    sub rsp, 40 ; allocate shadow space
   314 00000312 BA[76020000]                mov dword edx, GetProcAddress__glClear ; 2nd: LPCSTR lpProcName
   315 00000317 488B0C25[21020000]          mov qword rcx, [LoadLibraryA__opengl32_hModule] ; 1st: HMODULE hModule
   316 0000031F E8(00000000)            call GetProcAddress
   317 00000324 48890425[6E020000]          mov qword [glClear], rax ; return FARPROC
   318 0000032C 4883C428                    add rsp, 40 ; deallocate shadow space
   319 00000330 E8F8020000                  call GetLastError__epilogue_check
   320                                  
   321 00000335 E8E0020000                  call GetLastError__prologue_reset
   322                                      ; MS __fastcall x64 ABI
   323 0000033A 4883EC28                    sub rsp, 40 ; allocate shadow space
   324 0000033E BA[86020000]                mov dword edx, GetProcAddress__glGetError ; 2nd: LPCSTR lpProcName
   325 00000343 488B0C25[21020000]          mov qword rcx, [LoadLibraryA__opengl32_hModule] ; 1st: HMODULE hModule
   326 0000034B E8(00000000)            call GetProcAddress
   327 00000350 48890425[7E020000]          mov qword [glGetError], rax ; return FARPROC
   328 00000358 4883C428                    add rsp, 40 ; deallocate shadow space
   329 0000035C E8CC020000                  call GetLastError__epilogue_check
   330                                  
   331                                  
   332 00000361 E8B4020000                  call GetLastError__prologue_reset
   333                                      ; MS __fastcall x64 ABI
   334 00000366 4883EC28                    sub rsp, 40 ; allocate shadow space
   335 0000036A 488B0C25[DC010000]          mov qword rcx, [GetDC__hDC] ; 1st: HDC Arg1
   336 00000372 FF1425[29020000]        call [wglCreateContext]
   337 00000379 48890425[91020000]          mov qword [wglCreateContext__ctx], rax ; return HGLRC
   338 00000381 4883C428                    add rsp, 40 ; deallocate shadow space
   339 00000385 E8A3020000                  call GetLastError__epilogue_check
   340                                  
   341 0000038A E88B020000                  call GetLastError__prologue_reset
   342                                      ; MS __fastcall x64 ABI
   343 0000038F 4883EC28                    sub rsp, 40 ; allocate shadow space
   344 00000393 488B1425[91020000]          mov qword rdx, [wglCreateContext__ctx] ; 2nd: HGLRC
   345 0000039B 488B0C25[DC010000]          mov qword rcx, [GetDC__hDC] ; 1st: HDC
   346 000003A3 FF1425[42020000]        call [wglMakeCurrent]
   347 000003AA 890425[99020000]            mov dword [wglMakeCurrent__success], eax ; return BOOL
   348 000003B1 4883C428                    add rsp, 40 ; deallocate shadow space
   349 000003B5 E873020000                  call GetLastError__epilogue_check
   350                                  
   351                                      ; MS __fastcall x64 ABI
   352 000003BA 4883EC28                    sub rsp, 40 ; allocate shadow space
   353 000003BE 488B0425[A5020000]          mov qword rax, [F_1]
   354 000003C6 66480F6ED8                  movq xmm3, rax ; 4th: GLclampf alpha
   355 000003CB 488B0425[A5020000]          mov qword rax, [F_1]
   356 000003D3 66480F6ED0                  movq xmm2, rax ; 3rd: GLclampf blue
   357 000003D8 488B0425[9D020000]          mov qword rax, [F_0]
   358 000003E0 66480F6EC8                  movq xmm1, rax ; 2nd: GLclampf green
   359 000003E5 488B0425[9D020000]          mov qword rax, [F_0]
   360 000003ED 66480F6EC0                  movq xmm0, rax ; 1st: GLclampf red
   361 000003F2 FF1425[59020000]        call [glClearColor]
   362 000003F9 4883C428                    add rsp, 40 ; deallocate shadow space
   363                                  
   364                                  Loop:
   365 000003FD E818020000                  call GetLastError__prologue_reset
   366                                      ; MS __fastcall x64 ABI
   367 00000402 4883EC30                    sub rsp, 48 ; allocate shadow space
   368 00000406 C744242001000000            mov dword [rsp + 32], 1 ; 5th: UINT wRemoveMsg
   369 0000040E 41B900000000                mov dword r9d, 0 ; 4th: UINT wMsgFilterMax
   370 00000414 41B800000000                mov dword r8d, 0 ; 3rd: UINT wMsgFilterMin
   371 0000041A 488B1425[D4010000]          mov qword rdx, [CreateWindow__hWnd] ; 2nd: HWND hWnd
   372 00000422 48B9-                       mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   372 00000424 [AD02000000000000] 
   373 0000042C E8(00000000)            call PeekMessageA
   374 00000431 890425[D9020000]            mov dword [PeekMessage_hasMsgs], eax ; return BOOL
   375 00000438 4883C430                    add rsp, 48 ; deallocate shadow space
   376 0000043C E8EC010000                  call GetLastError__epilogue_check
   377                                  
   378                                  ; if zero messages, skip handling messages
   379 00000441 833C25[D9020000]00      cmp dword [PeekMessage_hasMsgs], 0
   380 00000449 0F845A000000            je near ..@Render
   381                                  ; 
   382                                  ; exit if message is WM_QUIT
   383 0000044F 833C25[B5020000]12      cmp dword [IncomingMessage_1.message], 0x12
   384 00000457 0F850A000000            jne near ..@Loop__processMessage
   385 0000045D B900000000              mov ecx, 0 ; UINT uExitCode
   386 00000462 E8FF020000              call Exit
   387                                  
   388                                  ..@Loop__processMessage:
   389 00000467 E8AE010000                  call GetLastError__prologue_reset
   390                                      ; MS __fastcall x64 ABI
   391 0000046C 4883EC28                    sub rsp, 40 ; allocate shadow space
   392 00000470 48B9-                       mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   392 00000472 [AD02000000000000] 
   393 0000047A E8(00000000)            call TranslateMessage
   394 0000047F 4883C428                    add rsp, 40 ; deallocate shadow space
   395 00000483 E8A5010000                  call GetLastError__epilogue_check
   396                                  
   397 00000488 E88D010000                  call GetLastError__prologue_reset
   398                                      ; MS __fastcall x64 ABI
   399 0000048D 4883EC28                    sub rsp, 40 ; allocate shadow space
   400 00000491 48B9-                       mov qword rcx, IncomingMessage_1 ; 1st: LPMSG lpMsg
   400 00000493 [AD02000000000000] 
   401 0000049B E8(00000000)            call DispatchMessageA
   402 000004A0 4883C428                    add rsp, 40 ; deallocate shadow space
   403 000004A4 E884010000                  call GetLastError__epilogue_check
   404                                  
   405                                  ..@Render:
   406                                      ; MS __fastcall x64 ABI
   407 000004A9 4883EC28                    sub rsp, 40 ; allocate shadow space
   408 000004AD B900400000                  mov dword ecx, 16384 ; 1st: GLbitfield mask
   409 000004B2 FF1425[6E020000]        call [glClear]
   410 000004B9 4883C428                    add rsp, 40 ; deallocate shadow space
   411                                  
   412 000004BD E858010000                  call GetLastError__prologue_reset
   413                                      ; MS __fastcall x64 ABI
   414 000004C2 4883EC28                    sub rsp, 40 ; allocate shadow space
   415 000004C6 488B0C25[DC010000]          mov qword rcx, [GetDC__hDC] ; 1st: HDC Arg1
   416 000004CE E8(00000000)            call SwapBuffers
   417 000004D3 890425[DD020000]            mov dword [SwapBuffers__success], eax ; return BOOL
   418 000004DA 4883C428                    add rsp, 40 ; deallocate shadow space
   419 000004DE E84A010000                  call GetLastError__epilogue_check
   420                                  
   421 000004E3 E915FFFFFF              jmp near Loop
   422                                  WndProc:
   423                                  ; move local registers to local shadow space to preserve them
   424 000004E8 48890C25[E1020000]      mov qword [WndProc__hWnd], rcx
   425 000004F0 48891425[E9020000]      mov qword [WndProc__uMsg], rdx
   426 000004F8 4C890425[F1020000]      mov qword [WndProc__wParam], r8
   427 00000500 4C890C25[F9020000]      mov qword [WndProc__lParam], r9
   428                                  ; switch(uMsg) {
   429 00000508 4883FA06                cmp qword rdx, 0x6
   430 0000050C 0F848D000000            je near ..@WndProc__WM_Activate
   431 00000512 4881FA12010000          cmp qword rdx, 0x112
   432 00000519 0F8484000000            je near ..@WndProc__WM_SysCommand
   433 0000051F 4883FA10                cmp qword rdx, 0x10
   434 00000523 0F84A2000000            je near ..@WndProc__WM_Close
   435 00000529 4883FA02                cmp qword rdx, 0x2
   436 0000052D 0F84BB000000            je near ..@WndProc__WM_Destroy
   437 00000533 4881FA00010000          cmp qword rdx, 0x100
   438 0000053A 0F84CE000000            je near ..@WndProc__WM_KeyDown
   439 00000540 4881FA01010000          cmp qword rdx, 0x101
   440 00000547 0F84C5000000            je near ..@WndProc__WM_KeyUp
   441 0000054D 4883FA05                cmp qword rdx, 0x5
   442 00000551 0F84BF000000            je near ..@WndProc__WM_Size
   443                                  ..@WndProc__default:
   444                                  ; default window procedure handles messages for us
   445 00000557 E8BE000000                  call GetLastError__prologue_reset
   446                                      ; MS __fastcall x64 ABI
   447 0000055C 4883EC28                    sub rsp, 40 ; allocate shadow space
   448 00000560 4C8B0C25[F9020000]          mov qword r9, [WndProc__lParam] ; 4th: LPARAM lParam
   449 00000568 4C8B0425[F1020000]          mov qword r8, [WndProc__wParam] ; 3rd: WPARAM wParam
   450 00000570 488B1425[E9020000]          mov qword rdx, [WndProc__uMsg] ; 2nd: UINT Msg
   451 00000578 488B0C25[E1020000]          mov qword rcx, [WndProc__hWnd] ; 1st: HWND hWnd
   452 00000580 E8(00000000)            call DefWindowProcA
   453 00000585 48890425[01030000]          mov qword [WndProc__return], rax ; return 
   454 0000058D 4883C428                    add rsp, 40 ; deallocate shadow space
   455 00000591 E897000000                  call GetLastError__epilogue_check
   456                                  
   457 00000596 488B0425[01030000]      mov qword rax, [WndProc__return] ; return
   458 0000059E C3                      ret
   459                                  ..@WndProc__WM_Activate:
   460 0000059F 4831C0                  xor rax, rax ; return NULL
   461 000005A2 C3                      ret
   462                                  ..@WndProc__WM_SysCommand:
   463 000005A3 8B1C25[F1020000]        mov dword ebx, [WndProc__wParam]
   464 000005AA 81FB40F10000            cmp dword ebx, 0xf140
   465 000005B0 0F8411000000            je near ..@return_zero
   466 000005B6 81FB70F10000            cmp dword ebx, 0xf170
   467 000005BC 0F8405000000            je near ..@return_zero
   468 000005C2 E990FFFFFF              jmp near ..@WndProc__default
   469                                  ..@return_zero:
   470 000005C7 4831C0                  xor rax, rax ; return NULL
   471 000005CA C3                      ret
   472                                  ..@WndProc__WM_Close:
   473 000005CB E84A000000                  call GetLastError__prologue_reset
   474                                      ; MS __fastcall x64 ABI
   475 000005D0 4883EC28                    sub rsp, 40 ; allocate shadow space
   476 000005D4 488B0C25[D4010000]          mov qword rcx, [CreateWindow__hWnd] ; 1st: HWND hWnd
   477 000005DC E8(00000000)            call DestroyWindow
   478 000005E1 4883C428                    add rsp, 40 ; deallocate shadow space
   479 000005E5 E843000000                  call GetLastError__epilogue_check
   480                                  
   481 000005EA 4831C0                  xor rax, rax ; return NULL
   482 000005ED C3                      ret
   483                                  ..@WndProc__WM_Destroy:
   484 000005EE E827000000                  call GetLastError__prologue_reset
   485                                      ; MS __fastcall x64 ABI
   486 000005F3 4883EC28                    sub rsp, 40 ; allocate shadow space
   487 000005F7 B900000000                  mov dword ecx, 0 ; 1st: int nExitCode
   488 000005FC E8(00000000)            call PostQuitMessage
   489 00000601 4883C428                    add rsp, 40 ; deallocate shadow space
   490 00000605 E823000000                  call GetLastError__epilogue_check
   491                                  
   492 0000060A 4831C0                  xor rax, rax ; return NULL
   493 0000060D C3                      ret
   494                                  ..@WndProc__WM_KeyDown:
   495 0000060E 4831C0                  xor rax, rax ; return NULL
   496 00000611 C3                      ret
   497                                  ..@WndProc__WM_KeyUp:
   498 00000612 4831C0                  xor rax, rax ; return NULL
   499 00000615 C3                      ret
   500                                  ..@WndProc__WM_Size:
   501 00000616 4831C0                  xor rax, rax ; return NULL
   502 00000619 C3                      ret
   503                                  
   504                                  GetLastError__prologue_reset:
   505                                      ; MS __fastcall x64 ABI
   506 0000061A 4883EC28                    sub rsp, 40 ; allocate shadow space
   507 0000061E B900000000                  mov dword ecx, 0 ; 1st: DWORD dwErrCode
   508 00000623 E8(00000000)            call SetLastError
   509 00000628 4883C428                    add rsp, 40 ; deallocate shadow space
   510 0000062C C3                      ret
   511                                  
   512                                  GetLastError__epilogue_check:
   513                                      ; MS __fastcall x64 ABI
   514 0000062D 4883EC28                    sub rsp, 40 ; allocate shadow space
   515 00000631 E8(00000000)            call GetLastError
   516 00000636 890425[00000000]            mov dword [GetLastError__errCode], eax ; return 
   517 0000063D 4883C428                    add rsp, 40 ; deallocate shadow space
   518 00000641 4883F800                cmp rax, 0
   519 00000645 7501                    jne ..@error
   520 00000647 C3                      ret
   521                                  
   522                                  ..@error:
   523                                      ; MS __fastcall x64 ABI
   524 00000648 4883EC40                    sub rsp, 64 ; allocate shadow space
   525 0000064C 48C744243000000000          mov qword [rsp + 48], 0 ; 7th: va_list *Arguments
   526 00000655 48C744242800010000          mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   527 0000065E 48C7442420-                 mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   527 00000663 [10000000]         
   528 00000667 41B900040000                mov dword r9d, 0x400 ; 4th: DWORD dwLanguageId
   529 0000066D 448B0425[00000000]          mov dword r8d, [GetLastError__errCode] ; 3rd: DWORD dwMessageId
   530 00000675 BA00000000                  mov dword edx, 0 ; 2nd: LPCVOID lpSource
   531 0000067A B900120000                  mov dword ecx, 0x1200 ; 1st: DWORD dwFlags
   532 0000067F E8(00000000)            call FormatMessageA
   533 00000684 890425[10010000]            mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   534 0000068B 4883C440                    add rsp, 64 ; deallocate shadow space
   535                                  
   536                                      ; MS __fastcall x64 ABI
   537 0000068F 4883EC30                    sub rsp, 48 ; allocate shadow space
   538 00000693 C744242000000000            mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   539 0000069B 41B9[27010000]              mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   540 000006A1 448B0425[10010000]          mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   541 000006A9 BA[10000000]                mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   542 000006AE 8B0C25[0C000000]            mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   543 000006B5 E8(00000000)            call WriteFile
   544 000006BA 4883C430                    add rsp, 48 ; deallocate shadow space
   545                                  
   546 000006BE 8B0C25[00000000]        mov ecx, [GetLastError__errCode] ; UINT uExitCode
   547 000006C5 E89C000000              call Exit
   548                                  
   549                                  GetLastError__epilogue_glGetError:
   550                                      ; MS __fastcall x64 ABI
   551 000006CA 4883EC28                    sub rsp, 40 ; allocate shadow space
   552 000006CE FF1425[7E020000]        call [glGetError]
   553 000006D5 890425[04000000]            mov dword [glGetError__code], eax ; return GLenum
   554 000006DC 4883C428                    add rsp, 40 ; deallocate shadow space
   555 000006E0 83F800                  cmp eax, 0
   556 000006E3 7501                    jne ..@glError
   557 000006E5 C3                      ret
   558                                  
   559                                  ..@glError:
   560                                      ; MS __fastcall x64 ABI
   561 000006E6 4883EC40                    sub rsp, 64 ; allocate shadow space
   562 000006EA 48C7442430-                 mov qword [rsp + 48], glGetError__code ; 7th: va_list *Arguments
   562 000006EF [04000000]         
   563 000006F3 48C744242800010000          mov qword [rsp + 40], 256 ; 6th: DWORD nSize
   564 000006FC 48C7442420-                 mov qword [rsp + 32], FormatMessage__tmpReturnBuffer ; 5th: LPSTR lpBuffer
   564 00000701 [10000000]         
   565 00000705 41B900000000                mov dword r9d, 0x0 ; 4th: DWORD dwLanguageId
   566 0000070B 41B800000000                mov dword r8d, 0 ; 3rd: DWORD dwMessageId
   567 00000711 BA[14010000]                mov dword edx, glGetError__str ; 2nd: LPCVOID lpSource
   568 00000716 B900240000                  mov dword ecx, 0x2400 ; 1st: DWORD dwFlags
   569 0000071B E8(00000000)            call FormatMessageA
   570 00000720 890425[10010000]            mov dword [FormatMessage__tmpReturnBufferLength], eax ; return DWORD TCHARs written
   571 00000727 4883C440                    add rsp, 64 ; deallocate shadow space
   572                                  
   573                                      ; MS __fastcall x64 ABI
   574 0000072B 4883EC30                    sub rsp, 48 ; allocate shadow space
   575 0000072F C744242000000000            mov dword [rsp + 32], 0 ; 5th: LPOVERLAPPED lpOverlapped
   576 00000737 41B9[27010000]              mov dword r9d, Console__bytesWritten ; 4th: LPDWORD lpNumberOfBytesWritten
   577 0000073D 448B0425[10010000]          mov dword r8d, [FormatMessage__tmpReturnBufferLength] ; 3rd: DWORD nNumberOfBytesToWrite
   578 00000745 BA[10000000]                mov dword edx, FormatMessage__tmpReturnBuffer ; 2nd: LPCVOID lpBuffer
   579 0000074A 8B0C25[0C000000]            mov dword ecx, [Console__stdout_nStdHandle] ; 1st: HANDLE hFile
   580 00000751 E8(00000000)            call WriteFile
   581 00000756 4883C430                    add rsp, 48 ; deallocate shadow space
   582 0000075A 8B0C25[04000000]        mov ecx, [glGetError__code] ; UINT uExitCode
   583 00000761 E800000000              call Exit
   584                                  
   585                                  Exit:
   586                                      ; MS __fastcall x64 ABI
   587 00000766 4883EC28                    sub rsp, 40 ; allocate shadow space
   588 0000076A E8(00000000)            call ExitProcess
   589 0000076F 4883C428                    add rsp, 40 ; deallocate shadow space
   590                                  
   591 00000773 C3                      ret
   592 00000774 E9EDFFFFFF              jmp near Exit
   593                                  
